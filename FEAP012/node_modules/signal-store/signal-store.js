import { Signal, signal, computed } from 'usignal';

function createGetters(state, gets, modules) {
    return Object.keys(gets).reduce((p, c)=>{
        p[c] = computed(()=>{
            const params = {
                state,
                getters: createGetters(state, gets, modules),
                modules
            };
            return gets[c]({
                ...state,
                ...params
            }, params);
        });
        return p;
    }, {});
}
function createActions(state, getters, actions, modules) {
    return Object.keys(actions).reduce((p, c)=>{
        p[c] = (payload)=>{
            actions[c]?.({
                state,
                getters,
                modules,
                dispatch: (type, payload)=>{
                    p[type](payload);
                }
            }, payload);
        };
        return p;
    }, {});
}
function createModules(modules) {
    return Object.keys(modules).reduce((p, c)=>{
        p[c] = modules[c];
        return p;
    }, {});
}
function createStateSignals(state) {
    return Object.keys(state).reduce((p, c)=>{
        const s = state[c];
        p[c] = s instanceof Signal ? s : signal(s);
        return p;
    }, {});
}
function createStore(options) {
    const { modules ={} , state , getters ={} , actions ={}  } = options;
    const states = createStateSignals(state || {});
    const getters$ = createGetters(states, getters, modules);
    return {
        ...createModules(modules),
        ...getters$,
        ...createActions(states, getters$, actions, modules)
    };
}

export { createStateSignals, createStore };
